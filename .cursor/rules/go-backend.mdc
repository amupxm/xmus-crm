---
globs: *.go
---

# Go Backend Development Rules

## Code Style & Conventions
- Use standard Go formatting with `gofmt`
- Follow Go naming conventions (PascalCase for exported, camelCase for private)
- Use meaningful variable and function names
- Add comprehensive comments for exported functions and types

## Project Structure
- Models go in [backend/model/](mdc:backend/model/) directory
- API handlers go in [backend/api/](mdc:backend/api/) directory
- Middleware goes in [backend/middleware/](mdc:backend/middleware/) directory
- Business logic goes in [backend/service/](mdc:backend/service/) directory

## Database & GORM
- Use GORM for all database operations
- Define models in [backend/model/](mdc:backend/model/) with proper GORM tags
- Use `gorm:"primaryKey"` for primary keys
- Use `gorm:"not null"` for required fields
- Use `gorm:"unique"` for unique constraints
- Use `gorm:"many2many:table_name"` for many-to-many relationships
- Always handle database errors properly

## API Development
- Use Gin framework for HTTP handlers
- Follow RESTful API conventions
- Use proper HTTP status codes
- Implement proper error handling and validation
- Use middleware for authentication and authorization
- Return consistent JSON response format with success/error structure

## Authentication & Authorization
- Use JWT tokens for authentication
- Implement role-based access control (RBAC)
- Use middleware for protected routes
- Hash passwords with bcrypt
- Store refresh tokens securely

## Error Handling
- Use structured logging with the custom logger
- Return appropriate HTTP status codes
- Provide meaningful error messages
- Log errors with context information

## Example Model Structure
```go
type ModelName struct {
    ID        uint           `gorm:"primaryKey"`
    Field     string         `gorm:"not null"`
    CreatedAt time.Time
    UpdatedAt time.Time
    DeletedAt gorm.DeletedAt
}
```

## Example API Handler
```go
func (h *Handler) CreateItem(c *gin.Context) {
    var req CreateRequest
    if err := c.ShouldBindJSON(&req); err != nil {
        c.JSON(400, gin.H{"error": err.Error()})
        return
    }
    
    // Business logic here
    
    c.JSON(201, gin.H{"success": true, "data": result})
}
```