---
globs: backend/model/*.go,frontend/src/types/*.ts
---

# Model Structure & Data Format Standards

## Backend Model Structure (Go/GORM)
- Use snake_case for database column names
- Use snake_case for JSON field names in API responses
- Use PascalCase for Go struct field names
- Include proper GORM tags for database constraints
- Use time.Time for all date/time fields

### Model Example:
```go
type LeaveRequest struct {
    ID          uint           `gorm:"primaryKey" json:"id"`
    UserID      uint           `gorm:"not null;index" json:"user_id"`
    StartDate   time.Time      `gorm:"not null" json:"start_date"`
    EndDate     time.Time      `gorm:"not null" json:"end_date"`
    LeaveType   string         `gorm:"not null" json:"leave_type"`
    Reason      string         `gorm:"type:text" json:"reason"`
    Status      string         `gorm:"not null;default:'pending'" json:"status"`
    CreatedAt   time.Time      `json:"created_at"`
    UpdatedAt   time.Time      `json:"updated_at"`
    DeletedAt   gorm.DeletedAt `gorm:"index" json:"deleted_at,omitempty"`
    
    // Relationships
    User        User           `gorm:"foreignKey:UserID" json:"user,omitempty"`
    Approver    *User          `gorm:"foreignKey:ApproverID" json:"approver,omitempty"`
}
```

## Frontend Type Definitions (TypeScript)
- Use camelCase for TypeScript interface properties
- Use PascalCase for interface names
- Include proper optional properties with `?`
- Use string for date fields (will be formatted as ISO 8601)

### TypeScript Interface Example:
```typescript
interface LeaveRequest {
  id: number;
  userId: number;
  startDate: string;  // ISO 8601 format: "2025-10-15T07:00:00+07:00"
  endDate: string;    // ISO 8601 format: "2025-10-15T07:00:00+07:00"
  leaveType: string;
  reason?: string;
  status: 'pending' | 'approved' | 'rejected' | 'cancelled';
  createdAt: string;  // ISO 8601 format
  updatedAt: string;  // ISO 8601 format
  deletedAt?: string; // ISO 8601 format
  
  // Relationships
  user?: User;
  approver?: User;
}
```

## API Request/Response Structure
- All API responses must follow consistent format
- Use snake_case for JSON field names
- Include proper error handling structure
- Use ISO 8601 date format with timezone

### Standard Response Format:
```json
{
  "success": true,
  "message": "Operation completed successfully",
  "data": {
    "id": 1,
    "user_id": 123,
    "start_date": "2025-10-15T07:00:00+07:00",
    "end_date": "2025-10-20T18:00:00+07:00",
    "leave_type": "annual",
    "reason": "Family vacation",
    "status": "pending",
    "created_at": "2025-01-15T10:30:00+07:00",
    "updated_at": "2025-01-15T10:30:00+07:00"
  },
  "meta": {
    "total": 1,
    "page": 1,
    "limit": 10
  }
}
```

### Error Response Format:
```json
{
  "success": false,
  "message": "Validation failed",
  "errors": [
    "start_date is required",
    "end_date must be after start_date"
  ]
}
```

## Date Handling Standards
- Store dates in UTC in database
- Convert to user's timezone for API responses
- Use ISO 8601 format: `2025-10-15T07:00:00+07:00`
- Always include timezone information
- Use time.Time in Go, string in TypeScript

### Backend Date Handling:
```go
// Convert UTC to timezone for response
func (lr *LeaveRequest) FormatDates(timezone string) {
    loc, _ := time.LoadLocation(timezone)
    lr.StartDate = lr.StartDate.In(loc)
    lr.EndDate = lr.EndDate.In(loc)
    lr.CreatedAt = lr.CreatedAt.In(loc)
    lr.UpdatedAt = lr.UpdatedAt.In(loc)
}

// JSON marshaling with proper date format
func (lr *LeaveRequest) MarshalJSON() ([]byte, error) {
    type Alias LeaveRequest
    return json.Marshal(&struct {
        StartDate string `json:"start_date"`
        EndDate   string `json:"end_date"`
        CreatedAt string `json:"created_at"`
        UpdatedAt string `json:"updated_at"`
        *Alias
    }{
        StartDate: lr.StartDate.Format("2006-01-02T15:04:05-07:00"),
        EndDate:   lr.EndDate.Format("2006-01-02T15:04:05-07:00"),
        CreatedAt: lr.CreatedAt.Format("2006-01-02T15:04:05-07:00"),
        UpdatedAt: lr.UpdatedAt.Format("2006-01-02T15:04:05-07:00"),
        Alias:     (*Alias)(lr),
    })
}
```

### Frontend Date Handling:
```typescript
// Date utility functions
export const formatDateForAPI = (date: Date): string => {
  return date.toISOString().replace('Z', '+07:00');
};

export const parseDateFromAPI = (dateString: string): Date => {
  return new Date(dateString);
};

export const formatDateForDisplay = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};
```

## Validation Rules
- Validate date formats on both frontend and backend
- Ensure timezone information is preserved
- Validate required fields
- Use proper data types for each field
- Implement proper error messages for validation failures