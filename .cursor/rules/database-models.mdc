---
globs: backend/model/*.go
---

# Database Model Development Rules

## GORM Model Structure
- Use GORM tags for database constraints
- Include standard fields: ID, CreatedAt, UpdatedAt, DeletedAt
- Use proper data types for fields
- Implement soft deletes with `gorm.DeletedAt`

## Model Conventions
- Use PascalCase for struct names
- Use snake_case for database column names
- Use `gorm:"primaryKey"` for primary keys
- Use `gorm:"not null"` for required fields
- Use `gorm:"unique"` for unique constraints
- Use `gorm:"index"` for indexed fields

## Relationships
- Use `gorm:"many2many:table_name"` for many-to-many relationships
- Use `gorm:"foreignKey:field_name"` for foreign keys
- Use `gorm:"references:field_name"` for reference fields
- Preload relationships when needed

## Model Methods
- Create constructor function `NewModelName(db *gorm.DB)`
- Implement CRUD operations
- Add business logic methods
- Handle errors properly
- Use transactions for complex operations

## Example Model
```go
type ModelName struct {
    ID        uint           `gorm:"primaryKey"`
    Name      string         `gorm:"not null;unique"`
    Email     string         `gorm:"not null;unique;index"`
    IsActive  bool           `gorm:"default:true"`
    CreatedAt time.Time
    UpdatedAt time.Time
    DeletedAt gorm.DeletedAt
    
    // Relationships
    RelatedItems []RelatedModel `gorm:"many2many:model_related_items;"`
}

type ModelNameModel struct {
    db *gorm.DB
}

func NewModelNameModel(db *gorm.DB) *ModelNameModel {
    return &ModelNameModel{db: db}
}

func (m *ModelNameModel) Create(item *ModelName) error {
    return m.db.Create(item).Error
}
```

## Migration Considerations
- Use `AutoMigrate` for schema changes
- Handle migration errors gracefully
- Test migrations thoroughly
- Use proper data types for fields
- Consider performance implications of indexes